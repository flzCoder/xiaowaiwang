const fs = require('fs')
const path = require('path')
const urlLib = require("url")
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const bodyParser = require('body-parser')
const cookieParser = require('cookie-parser')
const registerService = require('./server/register')
const loginService = require('./server/login')
const replyService = require('./server/reply')
const postFileService = require('./server/postfile')
const postAvatorService = require('./server/postavator')
const postMessageService = require('./server/postmessage')
const editInfoService = require('./server/editinfo')
const addfriendService = require('./server/addfriend')
const deleteMessageService = require('./server/deletemessage')
const getMessageService = require('./server/getmessage')
const getSoicalListService = require('./server/getsoicallist')
const getUserListService = require('./server/getuserlist')
const getInfoService = require('./server/getinfo')
const logoutService = require('./server/logout')
const checkService = require('./server/check')
const indexService = require('./server/index')
const recommend = require('./server/recommend')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

// 自定义跨域中间件
var allowCors = function(req, res, next) {
  res.header('Access-Control-Allow-Origin', req.headers.origin);
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  res.header('Access-Control-Allow-Credentials','true');
  next();
};
app.use(allowCors);//使用跨域中间件

app.use(cookieParser('123456'))
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({extend:false}))
app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.get('/getRecommend', recommend)
app.get('/getIndex', indexService)
app.get('/getMessage', getMessageService)
app.get('/getUserList', getUserListService)
app.get('/getSoicalList', getSoicalListService)
app.get('/getInfo', getInfoService)
app.get('/logout', logoutService)
app.get('/check', checkService)
app.post('/editInfo', editInfoService)
app.post('/postMessage', postMessageService)
app.post('/addfriend', addfriendService)
app.post('/postFile', postFileService)
app.post('/postAvator', postAvatorService)
app.post('/register', registerService)
app.post('/login', loginService)
app.post('/reply', replyService)
app.delete('/deleteMessage/:id', deleteMessageService)

app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render (req, res) {
  let host = req.header.host
  console.log(666,host);

  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: '手机网易网', // default title
    url: req.url,
    metas: `
        <meta name="keyword" content="vue,ssr">
        <meta name="description" content="vue srr demo">
    `
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8088
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})

process.on('unhandledRejection', error => {
  // Will print "unhandledRejection err is not defined"
  console.log('unhandledRejection', error.message);
});
